<?php


namespace Drupal\miniorange_saml;

use Drupal\miniorange_saml\MiniorangeSAMLConstants;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\GuzzleException;
class MiniorangeSAMLCustomer
{
    public $email;
    public $phone;
    public $customerKey;
    public $transactionId;
    public $password;
    public $otpToken;
    private $defaultCustomerId;
    private $defaultCustomerApiKey;
    public function __construct($qW, $iF, $xo, $D6)
    {
        $this->email = $qW;
        $this->phone = $iF;
        $this->password = $xo;
        $this->otpToken = $D6;
        $this->defaultCustomerId = "\61\66\65\65\65";
        $this->defaultCustomerApiKey = "\146\106\x64\x32\130\x63\166\124\x47\x44\x65\155\x5a\166\142\167\x31\x62\143\x55\x65\x73\x4e\112\x57\x45\161\x4b\x62\x62\125\161";
    }
    public function checkCustomer()
    {
        if (Utilities::isCurlInstalled()) {
            goto dr;
        }
        return json_encode(array("\163\164\141\164\x75\x73" => "\103\x55\x52\114\x5f\x45\122\122\117\x52", "\163\164\x61\x74\165\x73\x4d\145\163\x73\x61\x67\x65" => "\x3c\141\40\x68\x72\x65\x66\x3d\42\150\x74\164\160\72\57\x2f\x70\150\x70\56\156\x65\164\57\x6d\x61\x6e\165\141\154\x2f\145\156\x2f\143\165\162\154\x2e\151\x6e\x73\x74\x61\154\154\x61\x74\x69\x6f\156\56\160\150\160\x22\76\120\110\120\40\143\125\x52\x4c\x20\x65\170\164\x65\x6e\163\x69\157\x6e\74\57\141\x3e\40\x69\163\x20\156\x6f\164\x20\x69\156\x73\x74\141\154\154\145\x64\x20\x6f\x72\40\144\x69\x73\141\x62\x6c\145\x64\x2e"));
        dr:
        $GM = MiniorangeSAMLConstants::BASE_URL . "\x2f\155\x6f\x61\163\x2f\x72\x65\163\164\57\143\165\x73\x74\157\x6d\x65\x72\x2f\143\x68\145\x63\x6b\x2d\x69\146\x2d\145\170\151\163\164\163";
        $qW = $this->email;
        $w1 = array("\145\x6d\141\x69\x6c" => $qW);
        $y5 = json_encode($w1);
        try {
            $ld = \Drupal::httpClient()->request("\120\117\123\x54", $GM, ["\x62\x6f\x64\171" => $y5, "\x61\x6c\154\157\167\x5f\x72\145\x64\151\x72\x65\x63\164\163" => TRUE, "\150\164\x74\x70\x5f\x65\x72\162\157\162\163" => FALSE, "\144\x65\143\x6f\x64\145\x5f\x63\x6f\x6e\x74\145\x6e\x74" => true, "\166\145\162\151\x66\171" => FALSE, "\x68\145\x61\144\x65\162\x73" => array("\x43\157\156\x74\x65\x6e\164\55\124\x79\160\x65" => "\141\160\x70\154\x69\143\x61\164\151\157\156\x2f\152\x73\157\156", "\x41\165\x74\x68\x6f\x72\151\172\x61\164\x69\157\x6e" => "\102\x61\x73\x69\143")]);
            return $ld->getBody()->getContents();
        } catch (\Exception $BD) {
            \Drupal::logger("\x6d\x69\x6e\x69\x6f\x72\x61\x6e\147\x65\137\163\141\x6d\154")->notice("\105\162\x72\157\x72\40\x61\164\40\45\155\145\x74\150\157\x64\40\x6f\146\x20\45\x66\x69\x6c\145\x3a\x20\45\145\x72\x72\157\162", array("\x25\x6d\145\x74\x68\157\x64" => "\x63\x68\x65\x63\153\x43\165\x73\164\157\x6d\145\162", "\45\146\x69\154\145" => "\x63\x75\163\x74\157\155\145\x72\x5f\x73\x65\x74\165\x70\x2e\x70\x68\160", "\x25\145\162\162\x6f\162" => $BD->getMessage()));
        }
    }
    public function getCustomerKeys()
    {
        if (Utilities::isCurlInstalled()) {
            goto Bc;
        }
        return json_encode(array("\141\x70\151\x4b\x65\x79" => "\103\x55\122\x4c\137\105\x52\x52\x4f\122", "\164\157\x6b\145\156" => "\x3c\141\x20\150\162\145\x66\x3d\x22\150\164\164\x70\x3a\x2f\57\160\150\x70\x2e\156\145\164\57\155\141\x6e\x75\141\x6c\x2f\x65\x6e\x2f\x63\165\162\x6c\56\x69\x6e\x73\164\x61\154\x6c\141\x74\x69\x6f\x6e\56\160\x68\160\x22\76\x50\x48\120\40\143\125\122\114\40\145\x78\164\x65\156\163\151\x6f\156\x3c\57\x61\76\40\x69\163\x20\x6e\157\x74\x20\151\156\163\164\x61\154\x6c\x65\x64\x20\x6f\x72\x20\x64\151\x73\x61\x62\x6c\x65\144\x2e"));
        Bc:
        $GM = MiniorangeSAMLConstants::BASE_URL . "\57\x6d\157\141\163\57\x72\x65\x73\164\57\x63\165\163\164\x6f\x6d\145\162\x2f\x6b\x65\x79";
        $qW = $this->email;
        $xo = $this->password;
        $w1 = array("\x65\x6d\x61\151\x6c" => $qW, "\160\141\163\163\x77\x6f\x72\x64" => $xo);
        $iO = json_encode($w1);
        try {
            $ld = \Drupal::httpClient()->request("\x50\x4f\123\124", $GM, ["\x62\x6f\x64\171" => $iO, "\141\154\x6c\157\x77\137\162\x65\x64\151\162\145\x63\x74\x73" => TRUE, "\x68\164\164\160\137\145\162\162\157\162\163" => FALSE, "\x64\145\x63\157\144\145\x5f\x63\x6f\156\x74\x65\156\x74" => true, "\x76\x65\162\x69\146\171" => FALSE, "\150\x65\x61\x64\145\162\x73" => array("\103\x6f\x6e\x74\x65\156\164\55\x54\171\x70\145" => "\x61\160\x70\x6c\151\143\x61\x74\151\157\x6e\57\152\x73\157\x6e", "\x41\165\164\150\157\x72\x69\172\141\x74\151\x6f\x6e" => "\x42\141\163\x69\143")]);
            return $ld->getBody()->getContents();
        } catch (\Exception $BD) {
            \Drupal::logger("\155\151\x6e\x69\157\x72\x61\x6e\147\145\x5f\163\141\x6d\x6c")->notice("\105\x72\162\157\x72\40\x61\x74\40\45\155\x65\x74\x68\x6f\x64\40\157\x66\x20\45\x66\151\x6c\x65\72\40\x25\x65\162\162\157\162", array("\45\x6d\145\164\x68\x6f\144" => "\143\150\145\143\x6b\103\165\163\164\x6f\155\145\x72", "\x25\146\151\154\145" => "\143\x75\x73\164\157\155\x65\162\x5f\x73\x65\164\x75\x70\x2e\x70\150\160", "\45\145\x72\162\x6f\x72" => $BD->getMessage()));
        }
    }
    function verifyLicense($RX)
    {
        $GM = MiniorangeSAMLConstants::BASE_URL . "\x2f\155\x6f\x61\x73\57\x61\x70\151\x2f\x62\x61\x63\x6b\x75\160\143\157\x64\x65\x2f\x76\x65\x72\x69\146\171";
        $us = \Drupal::config("\x6d\x69\156\151\157\x72\141\156\147\145\x5f\163\141\155\x6c\56\163\145\x74\x74\151\156\147\x73")->get("\x6d\x69\156\151\x6f\162\x61\156\147\x65\x5f\163\141\155\154\x5f\143\x75\x73\x74\157\x6d\x65\162\137\151\x64");
        $lt = \Drupal::config("\x6d\x69\156\151\157\x72\141\156\147\145\x5f\163\x61\x6d\x6c\56\x73\x65\164\x74\151\156\x67\163")->get("\x6d\x69\156\x69\x6f\x72\x61\x6e\147\145\137\163\141\155\x6c\137\x63\165\163\x74\157\x6d\145\x72\137\x61\x70\151\x5f\x6b\145\171");
        global $base_url;
        $hg = round(microtime(true) * 1000);
        $pT = $us . number_format($hg, 0, '', '') . $lt;
        $YQ = hash("\x73\150\141\65\61\x32", $pT);
        $V2 = "\x43\165\x73\x74\157\x6d\x65\162\55\113\145\x79\x3a\x20" . $us;
        $zQ = "\x54\151\155\145\x73\164\x61\155\x70\72\x20" . number_format($hg, 0, '', '');
        $IE = "\x41\x75\x74\x68\x6f\162\x69\172\141\164\151\157\x6e\72\x20" . $YQ;
        $w1 = '';
        $w1 = array("\143\x6f\x64\145" => $RX, "\143\165\163\x74\157\x6d\x65\x72\113\x65\171" => $us, "\141\144\x64\x69\x74\x69\x6f\x6e\141\154\x46\151\145\154\x64\163" => array("\146\151\145\154\144\x31" => $base_url));
        $iO = json_encode($w1);
        try {
            $ld = \Drupal::httpClient()->request("\120\x4f\x53\124", $GM, ["\142\157\144\x79" => $iO, "\x61\x6c\x6c\x6f\x77\137\x72\145\144\x69\x72\145\143\x74\x73" => TRUE, "\150\164\164\x70\137\x65\x72\162\x6f\162\163" => FALSE, "\144\145\x63\x6f\x64\x65\x5f\x63\157\156\x74\x65\x6e\x74" => true, "\x76\145\162\x69\x66\171" => FALSE, "\x68\145\141\144\x65\162\163" => array("\103\157\x6e\164\145\x6e\164\55\124\171\160\x65" => "\x61\x70\160\x6c\x69\143\x61\x74\x69\x6f\x6e\57\x6a\x73\x6f\156", "\103\165\x73\x74\157\155\145\x72\x2d\113\145\171" => $us, "\124\151\155\x65\163\164\141\155\160" => $hg, "\101\165\x74\x68\x6f\x72\x69\x7a\x61\164\x69\x6f\x6e" => $YQ)]);
            return $ld->getBody()->getContents();
        } catch (\Exception $BD) {
            \Drupal::logger("\155\151\156\151\x6f\162\141\156\147\x65\137\163\x61\x6d\154")->notice("\105\162\162\157\162\x20\141\164\40\x25\155\x65\164\150\157\144\x20\157\146\x20\x25\146\151\x6c\x65\x3a\40\45\x65\162\x72\x6f\162", array("\45\x6d\x65\164\150\157\144" => "\143\150\x65\143\x6b\103\165\163\164\157\x6d\145\162", "\x25\146\x69\154\x65" => "\143\165\x73\x74\x6f\x6d\145\x72\x5f\163\145\164\x75\160\56\160\150\x70", "\x25\145\x72\162\157\162" => $BD->getMessage()));
        }
    }
    function updateStatus()
    {
        $GM = MiniorangeSAMLConstants::BASE_URL . "\x2f\155\x6f\141\163\57\141\160\151\57\x62\x61\x63\153\165\160\x63\157\x64\x65\x2f\165\160\144\x61\164\x65\163\164\141\x74\165\x73";
        $us = \Drupal::config("\155\151\x6e\151\x6f\162\141\156\147\x65\137\x73\x61\155\x6c\x2e\163\145\164\164\x69\156\147\x73")->get("\x6d\151\x6e\x69\157\x72\141\156\x67\145\137\163\x61\155\x6c\137\x63\165\x73\x74\157\155\x65\x72\137\151\x64");
        $lt = \Drupal::config("\x6d\x69\156\x69\157\x72\141\156\147\145\x5f\x73\141\x6d\x6c\x2e\x73\x65\164\x74\x69\156\147\x73")->get("\155\151\156\x69\x6f\162\x61\x6e\147\145\x5f\x73\141\x6d\154\137\x63\x75\x73\x74\x6f\155\145\x72\x5f\141\x70\151\137\153\x65\171");
        $hg = round(microtime(true) * 1000);
        $pT = $us . number_format($hg, 0, '', '') . $lt;
        $YQ = hash("\x73\x68\141\x35\61\62", $pT);
        $V2 = "\103\x75\163\x74\x6f\155\x65\162\55\x4b\145\x79\x3a\x20" . $us;
        $zQ = "\124\151\x6d\x65\163\164\141\155\x70\x3a\40" . number_format($hg, 0, '', '');
        $IE = "\101\165\164\150\x6f\x72\x69\x7a\141\x74\151\x6f\x6e\x3a\40" . $YQ;
        $C2 = \Drupal::config("\x6d\151\156\151\x6f\x72\x61\156\x67\145\137\163\141\x6d\x6c\56\x73\x65\164\x74\x69\x6e\147\x73")->get("\155\x69\156\151\157\162\x61\156\x67\145\137\163\x61\x6d\154\x5f\143\x75\163\164\x6f\155\145\162\137\x61\x64\x6d\x69\156\x5f\164\157\x6b\x65\x6e");
        $RX = AESEncryption::decrypt_data(\Drupal::config("\x6d\x69\156\151\x6f\162\x61\x6e\x67\145\x5f\163\141\x6d\154\x2e\x73\145\x74\164\151\x6e\x67\x73")->get("\155\151\x6e\151\x6f\162\x61\156\x67\145\137\163\x61\155\154\x5f\x6c\x69\x63\x65\x6e\163\145\x5f\153\145\x79"), $C2);
        $w1 = array("\x63\157\x64\x65" => $RX, "\x63\x75\163\x74\157\x6d\145\x72\113\x65\171" => $us);
        $iO = json_encode($w1);
        try {
            $ld = \Drupal::httpClient()->request("\x50\117\x53\x54", $GM, ["\142\x6f\144\x79" => $iO, "\x61\154\x6c\x6f\167\137\162\x65\144\151\162\145\x63\164\x73" => TRUE, "\x68\x74\164\x70\137\x65\x72\162\x6f\x72\163" => FALSE, "\144\x65\143\x6f\144\x65\x5f\143\x6f\156\164\145\x6e\x74" => true, "\x76\145\162\151\146\x79" => FALSE, "\x68\145\x61\x64\145\x72\x73" => array("\103\157\156\x74\x65\156\164\55\x54\x79\160\x65" => "\141\160\160\154\151\x63\x61\164\x69\x6f\156\x2f\152\x73\157\x6e", "\x43\165\x73\x74\x6f\x6d\145\162\x2d\113\x65\x79" => $us, "\x54\x69\155\x65\x73\164\x61\x6d\x70" => $hg, "\x41\165\x74\150\x6f\162\x69\x7a\x61\164\151\157\156" => $YQ)]);
            return $ld->getBody()->getContents();
        } catch (\Exception $BD) {
            echo "\x52\145\161\165\x65\x73\164\40\x45\x72\x72\x6f\162\x3a" . $BD->getMessage();
        }
    }
    function ccl()
    {
        $GM = MiniorangeSAMLConstants::BASE_URL . "\x2f\155\157\141\x73\57\162\145\x73\x74\57\143\x75\163\x74\x6f\x6d\145\x72\57\154\151\143\145\x6e\x73\x65";
        $us = \Drupal::config("\x6d\x69\x6e\151\157\x72\141\x6e\147\x65\137\x73\x61\x6d\154\56\x73\x65\x74\x74\x69\156\x67\163")->get("\x6d\x69\x6e\151\157\162\x61\156\x67\x65\x5f\x73\141\155\154\137\143\x75\x73\164\x6f\155\145\162\x5f\151\144");
        $lt = \Drupal::config("\x6d\x69\156\x69\157\162\x61\x6e\x67\145\x5f\163\x61\x6d\x6c\x2e\x73\145\164\x74\151\x6e\147\x73")->get("\x6d\x69\x6e\x69\x6f\x72\x61\156\147\x65\137\x73\x61\x6d\x6c\x5f\x63\165\163\164\157\155\x65\x72\x5f\x61\160\151\137\153\x65\171");
        $hg = round(microtime(TRUE) * 1000);
        $pT = $us . number_format($hg, 0, '', '') . $lt;
        $YQ = hash("\x73\150\x61\65\61\62", $pT);
        $V2 = "\103\165\163\164\157\155\x65\x72\55\113\145\x79\x3a\x20" . $us;
        $zQ = "\x54\x69\155\x65\163\164\141\155\x70\72\x20" . number_format($hg, 0, '', '');
        $IE = "\101\x75\164\x68\157\162\x69\x7a\141\164\151\x6f\x6e\x3a\x20" . $YQ;
        $w1 = array("\x63\x75\x73\x74\157\155\145\x72\x49\x64" => $us, "\141\x70\x70\x6c\x69\143\x61\164\x69\x6f\156\116\141\x6d\x65" => Utilities::getSamlRequestPlanName());
        $iO = json_encode($w1);
        try {
            $ld = \Drupal::httpClient()->request("\x50\117\123\124", $GM, ["\142\x6f\144\x79" => $iO, "\141\154\154\x6f\167\137\x72\x65\x64\151\x72\145\143\x74\163" => TRUE, "\150\x74\164\x70\x5f\145\162\x72\x6f\162\163" => FALSE, "\x64\x65\143\x6f\144\x65\x5f\x63\157\156\164\x65\x6e\164" => true, "\166\x65\x72\151\x66\x79" => FALSE, "\x68\145\141\x64\x65\162\163" => array("\x43\x6f\x6e\164\x65\156\164\55\124\x79\x70\145" => "\x61\x70\x70\154\151\143\x61\164\151\x6f\156\x2f\x6a\163\157\156", "\x43\165\163\x74\157\155\145\162\x2d\113\x65\171" => $us, "\124\151\155\x65\163\x74\x61\155\x70" => $hg, "\101\x75\x74\x68\157\162\151\x7a\x61\164\151\x6f\156" => $YQ)]);
            return $ld->getBody()->getContents();
        } catch (\Exception $BD) {
            echo "\122\x65\161\x75\x65\163\164\x20\105\x72\x72\157\x72\x3a" . $BD->getMessage();
        }
    }
}
